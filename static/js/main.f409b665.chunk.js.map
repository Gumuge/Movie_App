{"version":3,"sources":["Movies.js","App.js","reportWebVitals.js","index.js"],"names":["Movies","props","className","src","poster","alt","title","year","genres","map","item","index","summary","slice","prototype","id","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAIA,SAASA,EAAOC,GACZ,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKA,UAAU,SAASC,IAAKF,EAAMG,OAAQC,IAAKJ,EAAMK,MAAOA,MAAOL,EAAMK,QAC1E,sBAAKJ,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,oBAAIJ,UAAU,aAAd,SAA4BD,EAAMM,OAClC,oBAAIL,UAAU,eAAd,SACCD,EAAMO,OAAOC,KAAI,SAACC,EAAMC,GAAP,OACd,oBAAIT,UAAU,eAAd,SAA0CQ,GAARC,WAI1C,oBAAGT,UAAU,gBAAb,UAA8BD,EAAMW,QAAQC,MAAM,EAAG,KAArD,YAKZb,EAAOc,UAAY,CACfC,GAAIC,IAAUC,OAAOC,WACrBZ,MAAOU,IAAUG,OAAOD,WACxBN,QAASI,IAAUG,OAAOD,WAC1Bd,OAAQY,IAAUG,OAAOD,WACzBX,KAAMS,IAAUC,OAAOC,WACvBV,OAAQQ,IAAUI,QAAQJ,IAAUG,QAAQD,YAGjClB,QC2BAqB,E,4MAlDXC,MAAQ,CACJC,WAAW,EACXC,OAAQ,I,EAEZC,U,sBAAY,8BAAAC,EAAA,sEAC+BC,IAAMC,IAAI,yEADzC,gBACaJ,EADb,EACDK,KAAOA,KAAOL,OACrBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CACVR,SACAD,WAAW,IALP,2C,uDAQZ,WAMIU,KAAKR,c,oBAGT,WACI,MAA4BQ,KAAKX,MAA1BC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,OAClB,OACI,yBAAStB,UAAU,YAAnB,SACA,8BACKqB,EACD,qBAAKrB,UAAU,SAAf,SACI,sBAAMA,UAAU,cAAhB,0BAEJ,8BACKsB,EAAOf,KAAI,SAACyB,GAAD,OACR,cAAC,EAAD,CAEAnB,GAAImB,EAAMnB,GACVR,KAAM2B,EAAM3B,KACZD,MAAO4B,EAAM5B,MACbM,QAASsB,EAAMtB,QACfR,OAAQ8B,EAAMC,mBACd3B,OAAQ0B,EAAM1B,QANT0B,EAAMnB,iB,GAlCjBqB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f409b665.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movies.css\";\r\n\r\nfunction Movies(props){\r\n    return(\r\n        <div className=\"movie\">\r\n            <img className=\"poster\" src={props.poster} alt={props.title} title={props.title}></img>\r\n            <div className=\"movie_data\">\r\n                <h3 className=\"movie_title\">{props.title}</h3>\r\n                <h3 className=\"movie_year\">{props.year}</h3>\r\n                <ul className=\"movie_genres\">\r\n                {props.genres.map((item, index) => (\r\n                    <li className=\"genres_genre\" key={index}>{item}</li>\r\n                ))}\r\n                </ul>\r\n            </div>\r\n            <p className=\"movie_summary\">{props.summary.slice(0, 140)}...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovies.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movies;\r\n","import React from 'react';\r\nimport \"./App.css\";\r\nimport { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport axios from \"axios\";\r\nimport Movies from './Movies';\r\n\r\nclass App extends Component{\r\n    state = {\r\n        isLoading: true,\r\n        movies: []\r\n    }\r\n    getMovies = async() => {\r\n        const {data: {data: {movies}}} = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\r\n        console.log(movies);\r\n        this.setState({\r\n            movies,\r\n            isLoading: false\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        // setTimeout(function(){\r\n        //     this.setState({\r\n        //         isLoading:false\r\n        //     })\r\n        // }.bind(this), 6000);\r\n        this.getMovies();\r\n    }\r\n   \r\n    render(){\r\n        const {isLoading, movies} = this.state;\r\n        return(\r\n            <section className=\"container\">\r\n            <div>\r\n                {isLoading? \r\n                <div className=\"loader\">\r\n                    <span className=\"loader_text\">Loading...</span>\r\n                </div> : \r\n                <div>\r\n                    {movies.map((movie) =>(\r\n                        <Movies\r\n                        key={movie.id}\r\n                        id={movie.id}\r\n                        year={movie.year}\r\n                        title={movie.title}\r\n                        summary={movie.summary}\r\n                        poster={movie.medium_cover_image}\r\n                        genres={movie.genres}>\r\n                        </Movies>\r\n                    ))}\r\n                </div>\r\n                }\r\n            </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}